const PIECE_VALUES = {
    k: 0,
    q: 975,
    r: 500,
    b: 335,
    n: 325,
    p: 100
};

// Adjustements of piece values based on the number of own pawns
const KNIGHT_VALUE_ADJUSTMENTS = [-20, -16, -12, -8, -4,  0,  4,  8, 12];
const ROOK_VALUE_ADJUSTMENTS = [15,  12,   9,  6,  3,  0, -3, -6, -9];

const BISHOP_PAIR_BONUS = 30;
const KNIGHT_PAIR_PENALTY = 8;
const ROOK_PAIR_PENALTY = 16;

// PSTs
const PAWN_MG_PST = [
     0,   0,   0,   0,   0,   0,   0,   0, 0,0,0,0,0,0,0,0,
    -6,  -4,   1,   1,   1,   1,  -4,  -6, 0,0,0,0,0,0,0,0,
    -6,  -4,   1,   2,   2,   1,  -4,  -6, 0,0,0,0,0,0,0,0,
    -6,  -4,   2,   8,   8,   2,  -4,  -6, 0,0,0,0,0,0,0,0,
    -6,  -4,   5,  10,  10,   5,  -4,  -6, 0,0,0,0,0,0,0,0,
    -4,  -4,   1,   5,   5,   1,  -4,  -4, 0,0,0,0,0,0,0,0,
    -6,  -4,   1, -24,  -24,  1,  -4,  -6, 0,0,0,0,0,0,0,0,
     0,   0,   0,   0,   0,   0,   0,   0, 0,0,0,0,0,0,0,0
];

const PAWN_EG_PST = [
     0,   0,   0,   0,   0,   0,   0,   0, 0,0,0,0,0,0,0,0,
    -6,  -4,   1,   1,   1,   1,  -4,  -6, 0,0,0,0,0,0,0,0,
    -6,  -4,   1,   2,   2,   1,  -4,  -6, 0,0,0,0,0,0,0,0,
    -6,  -4,   2,   8,   8,   2,  -4,  -6, 0,0,0,0,0,0,0,0,
    -6,  -4,   5,  10,  10,   5,  -4,  -6, 0,0,0,0,0,0,0,0,
    -4,  -4,   1,   5,   5,   1,  -4,  -4, 0,0,0,0,0,0,0,0,
    -6,  -4,   1, -24,  -24,  1,  -4,  -6, 0,0,0,0,0,0,0,0,
     0,   0,   0,   0,   0,   0,   0,   0, 0,0,0,0,0,0,0,0
];

const KNIGHT_MG_PST = [
    -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   0,   0,   0,   0,   0,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   4,   6,   6,   4,   0,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   6,   8,   8,   6,   0,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   6,   8,   8,   6,   0,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   4,   6,   6,   4,   0,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   1,   2,   2,   1,   0,  -8, 0,0,0,0,0,0,0,0,
   -16, -12,  -8,  -8,  -8,  -8, -12,  -16, 0,0,0,0,0,0,0,0
];

const KNIGHT_EG_PST = [
    -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   0,   0,   0,   0,   0,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   4,   6,   6,   4,   0,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   6,   8,   8,   6,   0,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   6,   8,   8,   6,   0,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   4,   6,   6,   4,   0,  -8, 0,0,0,0,0,0,0,0,
    -8,   0,   1,   2,   2,   1,   0,  -8, 0,0,0,0,0,0,0,0,
   -16, -12,  -8,  -8,  -8,  -8, -12,  -16, 0,0,0,0,0,0,0,0
];

const BISHOP_MG_PST = [
    -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4, 0,0,0,0,0,0,0,0,
    -4,   0,   0,   0,   0,   0,   0,  -4, 0,0,0,0,0,0,0,0,
    -4,   0,   2,   4,   4,   2,   0,  -4, 0,0,0,0,0,0,0,0,
    -4,   0,   4,   6,   6,   4,   0,  -4, 0,0,0,0,0,0,0,0,
    -4,   0,   4,   6,   6,   4,   0,  -4, 0,0,0,0,0,0,0,0,
    -4,   1,   2,   4,   4,   2,   1,  -4, 0,0,0,0,0,0,0,0,
    -4,   2,   1,   1,   1,   1,   2,  -4, 0,0,0,0,0,0,0,0,
    -4,  -4, -12,  -4,  -4, -12,  -4,  -4, 0,0,0,0,0,0,0,0
];

const BISHOP_EG_PST = [
    -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4, 0,0,0,0,0,0,0,0,
    -4,   0,   0,   0,   0,   0,   0,  -4, 0,0,0,0,0,0,0,0,
    -4,   0,   2,   4,   4,   2,   0,  -4, 0,0,0,0,0,0,0,0,
    -4,   0,   4,   6,   6,   4,   0,  -4, 0,0,0,0,0,0,0,0,
    -4,   0,   4,   6,   6,   4,   0,  -4, 0,0,0,0,0,0,0,0,
    -4,   1,   2,   4,   4,   2,   1,  -4, 0,0,0,0,0,0,0,0,
    -4,   2,   1,   1,   1,   1,   2,  -4, 0,0,0,0,0,0,0,0,
    -4,  -4, -12,  -4,  -4, -12,  -4,  -4, 0,0,0,0,0,0,0,0
];

const ROOK_MG_PST = [
     5,   5,   5,   5,   5,   5,   5,   5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
     0,   0,   0,   2,   2,   0,   0,   0, 0,0,0,0,0,0,0,0
];

const ROOK_EG_PST = [
     5,   5,   5,   5,   5,   5,   5,   5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
    -5,   0,   0,   0,   0,   0,   0,  -5, 0,0,0,0,0,0,0,0,
     0,   0,   0,   2,   2,   0,   0,   0, 0,0,0,0,0,0,0,0
];

const QUEEN_MG_PST = [
     0,   0,   0,   0,   0,   0,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   1,   1,   1,   1,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   1,   2,   2,   1,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   2,   3,   3,   2,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   2,   3,   3,   2,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   1,   2,   2,   1,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   1,   1,   1,   1,   0,   0, 0,0,0,0,0,0,0,0,
    -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5, 0,0,0,0,0,0,0,0
];

const QUEEN_EG_PST = [
     0,   0,   0,   0,   0,   0,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   1,   1,   1,   1,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   1,   2,   2,   1,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   2,   3,   3,   2,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   2,   3,   3,   2,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   1,   2,   2,   1,   0,   0, 0,0,0,0,0,0,0,0,
     0,   0,   1,   1,   1,   1,   0,   0, 0,0,0,0,0,0,0,0,
    -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5, 0,0,0,0,0,0,0,0
];

const KING_MG_PST = [
   -40, -30, -50, -70, -70, -50, -30, -40, 0,0,0,0,0,0,0,0,
   -30, -20, -40, -60, -60, -40, -20, -30, 0,0,0,0,0,0,0,0,
   -20, -10, -30, -50, -50, -30, -10, -20, 0,0,0,0,0,0,0,0,
   -10,   0, -20, -40, -40, -20,   0, -10, 0,0,0,0,0,0,0,0,
     0,  10, -10, -30, -30, -10,  10,   0, 0,0,0,0,0,0,0,0,
    10,  20,   0, -20, -20,   0,  20,  10, 0,0,0,0,0,0,0,0,
    30,  40,  20,   0,   0,  20,  40,  30, 0,0,0,0,0,0,0,0,
    40,  50,  30,  10,  10,  30,  50,  40, 0,0,0,0,0,0,0,0
];

const KING_EG_PST = [
   -72, -48, -36, -24, -24, -36, -48, -72, 0,0,0,0,0,0,0,0,
   -48, -24, -12,   0,   0, -12, -24, -48, 0,0,0,0,0,0,0,0,
   -36, -12,   0,  12,  12,   0, -12, -36, 0,0,0,0,0,0,0,0,
   -24,   0,  12,  24,  24,  12,   0, -24, 0,0,0,0,0,0,0,0,
   -24,   0,  12,  24,  24,  12,   0, -24, 0,0,0,0,0,0,0,0,
   -36, -12,   0,  12,  12,   0, -12, -36, 0,0,0,0,0,0,0,0,
   -48, -24, -12,   0,   0, -12, -24, -48, 0,0,0,0,0,0,0,0,
   -72, -48, -36, -24, -24, -36, -48, -72, 0,0,0,0,0,0,0,0
];

const PST = {
    mg: {
        p: {w: PAWN_MG_PST, b: mirrorPST(PAWN_MG_PST)},
        n: {w: KNIGHT_MG_PST, b: mirrorPST(KNIGHT_MG_PST)},
        b: {w: BISHOP_MG_PST, b: mirrorPST(BISHOP_MG_PST)},
        r: {w: ROOK_MG_PST, b: mirrorPST(ROOK_MG_PST)},
        q: {w: QUEEN_MG_PST, b: mirrorPST(QUEEN_MG_PST)},
        k: {w: KING_MG_PST, b: mirrorPST(KING_MG_PST)}
    },
    eg: {
        p: {w: PAWN_EG_PST, b: mirrorPST(PAWN_EG_PST)},
        n: {w: KNIGHT_EG_PST, b: mirrorPST(KNIGHT_EG_PST)},
        b: {w: BISHOP_EG_PST, b: mirrorPST(BISHOP_EG_PST)},
        r: {w: ROOK_EG_PST, b: mirrorPST(ROOK_EG_PST)},
        q: {w: QUEEN_EG_PST, b: mirrorPST(QUEEN_EG_PST)},
        k: {w: KING_EG_PST, b: mirrorPST(KING_EG_PST)}
    }
};


function eval2(game) {
    const scores = {
        mg: {w: 0, b: 0},
        eg: {w: 0, b: 0}
    };
    const pieceAdjustment = {w: 0, b: 0};
    let gamePhase = 0;


    _.forEach(game.pieces, (pieces, pieceType) => {
        ['w', 'b'].forEach(color => {
            const squares = pieceType == 'k' ? [pieces[color]] : pieces[color];

            // Piece values
            const score = squares.length * PIECE_VALUES[pieceType];
            scores.mg[color] += score;
            scores.eg[color] += score;

            // Piece value adjustments and pair bonuses
            let adjustment = 0;
            if (pieceType == 'b' && squares.length > 1) {
                adjustment += BISHOP_PAIR_BONUS;
            } else if (pieceType == 'n' || pieceType == 'r') {
                if (squares.length > 1) {
                    const penalty = pieceType == 'n' ? KNIGHT_PAIR_PENALTY : ROOK_PAIR_PENALTY;
                    adjustment -= penalty;
                }

                const pawnCount = game.pieces.p[color].length;
                const adj = pieceType == 'n' ? KNIGHT_VALUE_ADJUSTMENTS : ROOK_VALUE_ADJUSTMENTS;
                adjustment += adj[pawnCount] * squares.length;
            }
            pieceAdjustment[color] += adjustment;

            // PSTs
            squares.forEach(square => {
                scores.mg[color] += PST.mg[pieceType][color][square];
                scores.eg[color] += PST.eg[pieceType][color][square];
            });


        });
    });

    return scores.mg.w - scores.mg.b;
}


// Helpers
function mirrorPST(arr) {
    return _.flatten(_.chunk(arr, 16).reverse());
}


if (typeof module !== 'undefined') module.exports = eval2;
